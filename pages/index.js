import Head from "next/head";
import styles from "../styles/index.module.css";
import { Contract, providers, ethers } from "ethers";
import { useState, useEffect, useRef } from "react";
import Web3Modal from "web3modal";
import { NFT_CONTRACT_ADDRESS, abi } from "../const";

export default function Home() {
  const [walletConnected, setWalletConnected] = useState(false);
  const [nfts, setNfts] = useState(0);
  const web3ModalRef = useRef();

  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new ethers.providers.Web3Provider(provider);
    const { chainId } = await web3Provider.getNetwork();
    if (chainId != 97) {
      window.alert("Change to BNB-chain testnet");
    }
    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };

  const safeMint = async () => {
    try {
      const signer = await getProviderOrSigner(true);
      console.log(signer);
      const nftContract = new Contract(NFT_CONTRACT_ADDRESS, abi, signer);
      console.log(nftContract);
      await nftContract.safeMint(signer.getAddress(), {
        value: ethers.utils.parseEther("0.001"),
      });
      await getNFTs();
    } catch (error) {
      console.error(error);
    }
  };

  const getNFTs = async () => {
    try {
      const signer = await getProviderOrSigner(true);
      const nftContract = new Contract(NFT_CONTRACT_ADDRESS, abi, signer);
      const address = await signer.getAddress();
      const nftBalance = Number(await nftContract.balanceOf(address));
      console.log(nftBalance);
      if (nftBalance) {
        setNfts(nftBalance);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (error) {
      console.error(error);
    }
  };

  const renderButton = () => {
    if (walletConnected) {
      return (
        <div>
          <button onClick={safeMint} className={styles._btn}>
            Mint NFT
          </button>
        </div>
      );
    } else {
      return (
        <button onClick={connectWallet} className={styles._btn}>
          Connect Wallet
        </button>
      );
    }
  };

  useEffect(() => {
    if (!walletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: 97,
        providerOptions: {},
        disableInjectedProvider: false,
      });
    }
  }, [walletConnected]);

  return (
    <>
      <Head>
        <title>Crypto Ananas NFT Collection</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <div className={styles.header}>
          <div className={styles.header__content}>
            <button className={styles._btn}>
              {!walletConnected ? "Connect Wallet" : "Disconnect"}
            </button>
          </div>
        </div>
        <main className={styles.main}>
          <div className={styles.content}>
            <h1 className={styles.content__heading}>
              Crypto Ananas NFT Collection
            </h1>
            {renderButton()}
            <p className={styles.content__amount}>You have {nfts} nfts</p>
          </div>
        </main>
      </div>
    </>
  );
}
